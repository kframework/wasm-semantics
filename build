#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
extdir = '.build'
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))

from kninja import *

# Build
# =====

proj = KProject(extdir = extdir)
def build_wasm(backend, flags = ''):
    return proj.definition( alias             = 'wasm-' + backend
                          , backend           = backend
                          , main              = 'test.md'
                          , other             = [ 'wasm.md', 'data.md', 'kwasm-lemmas.md' ]
                          , directory         = proj.builddir('defn', backend)
                          , runner_script     = './kwasm'
                          , flags             = '--main-module WASM-TEST --syntax-module WASM-TEST ' \
                                              + flags
                          )
wasm_java = build_wasm(backend = 'java')
wasm_ocaml = build_wasm(backend = 'ocaml', flags = '-O3 --non-strict')
wasm_haskell = build_wasm(backend = 'haskell')

# Testing
# =======

concrete_backend = wasm_ocaml
symbolic_backend = wasm_java

def simple_tests(defn, backend):
    simple = defn.tests( glob = 'tests/simple/*.wast'
                       , alias = 'test-simple-' + backend
                       , expected = 'tests/success-' + backend + '.out'
                       , default = False
                       )
    return exec

def conformance_tests(defn, backend):
    conformance = defn.tests( glob = 'tests/wasm-tests/test/core/*.wast'
                            , alias = 'test-conformance-' + backend
                            , expected = 'tests/success-' + backend + '.out'
                            , default = False
                            )
    return exec

def proof_tests(defn, backend):
    return defn.proofs( glob = 'tests/proofs/*-spec.k'
                      , alias = 'test-proofs-' + backend
                      , default = False
                      )

simple_tests(wasm_java, 'java')
simple_tests(wasm_ocaml, 'ocaml')
conformance_tests(wasm_ocaml, 'ocaml')
proof_tests(wasm_java, 'java')
proof_tests(wasm_haskell, 'haskell')

proj.alias(name = 'test-exec',   targets = 'test-exec-java')
proj.alias(name = 'test-simple', targets = 'test-simple-java')
proj.alias(name = 'test-conformance', targets = 'test-conformance-ocaml')
proj.alias(name = 'test-proofs', targets = 'test-proofs-java')
proj.default(['test-exec', 'test-simple', 'test-proofs'])

# Main
# ====

proj.main()

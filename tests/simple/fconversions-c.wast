(module
  (func (export "i32.trunc_f32_s") (param $x f32) (result i32) (i32.trunc_f32_s (local.get $x)))
  (func (export "i32.trunc_f32_u") (param $x f32) (result i32) (i32.trunc_f32_u (local.get $x)))
  (func (export "i32.trunc_f64_s") (param $x f64) (result i32) (i32.trunc_f64_s (local.get $x)))
  (func (export "i32.trunc_f64_u") (param $x f64) (result i32) (i32.trunc_f64_u (local.get $x)))
  (func (export "i64.trunc_f32_s") (param $x f32) (result i64) (i64.trunc_f32_s (local.get $x)))
  (func (export "i64.trunc_f32_u") (param $x f32) (result i64) (i64.trunc_f32_u (local.get $x)))
  (func (export "i64.trunc_f64_s") (param $x f64) (result i64) (i64.trunc_f64_s (local.get $x)))
  (func (export "i64.trunc_f64_u") (param $x f64) (result i64) (i64.trunc_f64_u (local.get $x)))
  (func (export "f32.convert_i32_s") (param $x i32) (result f32) (f32.convert_i32_s (local.get $x)))
  (func (export "f32.convert_i64_s") (param $x i64) (result f32) (f32.convert_i64_s (local.get $x)))
  (func (export "f64.convert_i32_s") (param $x i32) (result f64) (f64.convert_i32_s (local.get $x)))
  (func (export "f64.convert_i64_s") (param $x i64) (result f64) (f64.convert_i64_s (local.get $x)))
  (func (export "f32.convert_i32_u") (param $x i32) (result f32) (f32.convert_i32_u (local.get $x)))
  (func (export "f32.convert_i64_u") (param $x i64) (result f32) (f32.convert_i64_u (local.get $x)))
  (func (export "f64.convert_i32_u") (param $x i32) (result f64) (f64.convert_i32_u (local.get $x)))
  (func (export "f64.convert_i64_u") (param $x i64) (result f64) (f64.convert_i64_u (local.get $x)))
  (func (export "f64.promote_f32") (param $x f32) (result f64) (f64.promote_f32 (local.get $x)))
  (func (export "f32.demote_f64") (param $x f64) (result f32) (f32.demote_f64 (local.get $x)))
)

(assert_return (invoke "i32.trunc_f32_s" (f32.const 0.0)) (i32.const 0))
(assert_return (invoke "i32.trunc_f32_s" (f32.const -0.0)) (i32.const 0))
(assert_return (invoke "i32.trunc_f32_s" (f32.const 1.401298e-45)) (i32.const 0))
(assert_return (invoke "i32.trunc_f32_s" (f32.const -1.401298e-45)) (i32.const 0))
(assert_return (invoke "i32.trunc_f32_s" (f32.const 1.0)) (i32.const 1))
(assert_return (invoke "i32.trunc_f32_s" (f32.const 1.100000e+00)) (i32.const 1))
(assert_return (invoke "i32.trunc_f32_s" (f32.const 1.5)) (i32.const 1))
(assert_return (invoke "i32.trunc_f32_s" (f32.const -1.0)) (i32.const -1))
(assert_return (invoke "i32.trunc_f32_s" (f32.const -1.100000e+00)) (i32.const -1))
(assert_return (invoke "i32.trunc_f32_s" (f32.const -1.5)) (i32.const -1))
(assert_return (invoke "i32.trunc_f32_s" (f32.const -1.9)) (i32.const -1))
(assert_return (invoke "i32.trunc_f32_s" (f32.const -2.0)) (i32.const -2))
(assert_return (invoke "i32.trunc_f32_s" (f32.const 2147483520.0)) (i32.const 2147483520))
(assert_return (invoke "i32.trunc_f32_s" (f32.const -2147483648.0)) (i32.const -2147483648))
(assert_trap (invoke "i32.trunc_f32_s" (f32.const 2147483648.0)) "integer overflow")
(assert_trap (invoke "i32.trunc_f32_s" (f32.const -2147483904.0)) "integer overflow")
(assert_trap (invoke "i32.trunc_f32_s" (f32.const Infinity)) "integer overflow")
(assert_trap (invoke "i32.trunc_f32_s" (f32.const -Infinity)) "integer overflow")
(assert_trap (invoke "i32.trunc_f32_s" (f32.const NaN)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f32_s" (f32.const nan:0x200000)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f32_s" (f32.const -nan)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f32_s" (f32.const -nan:0x200000)) "invalid conversion to integer")

(assert_return (invoke "i32.trunc_f32_u" (f32.const 0.0)) (i32.const 0))
(assert_return (invoke "i32.trunc_f32_u" (f32.const -0.0)) (i32.const 0))
(assert_return (invoke "i32.trunc_f32_u" (f32.const 1.401298e-45)) (i32.const 0))
(assert_return (invoke "i32.trunc_f32_u" (f32.const -1.401298e-45)) (i32.const 0))
(assert_return (invoke "i32.trunc_f32_u" (f32.const 1.0)) (i32.const 1))
(assert_return (invoke "i32.trunc_f32_u" (f32.const 1.100000e+00)) (i32.const 1))
(assert_return (invoke "i32.trunc_f32_u" (f32.const 1.5)) (i32.const 1))
(assert_return (invoke "i32.trunc_f32_u" (f32.const 1.9)) (i32.const 1))
(assert_return (invoke "i32.trunc_f32_u" (f32.const 2.0)) (i32.const 2))
(assert_return (invoke "i32.trunc_f32_u" (f32.const 2147483648)) (i32.const -2147483648)) ;; 0x1.00000p+31 -> 8000 0000
(assert_return (invoke "i32.trunc_f32_u" (f32.const 4294967040.0)) (i32.const -256))
(assert_return (invoke "i32.trunc_f32_u" (f32.const -9.000000e-01)) (i32.const 0))
(assert_return (invoke "i32.trunc_f32_u" (f32.const -9.999999e-01)) (i32.const 0))
(assert_trap (invoke "i32.trunc_f32_u" (f32.const 4294967296.0)) "integer overflow")
(assert_trap (invoke "i32.trunc_f32_u" (f32.const -1.0)) "integer overflow")
(assert_trap (invoke "i32.trunc_f32_u" (f32.const Infinity)) "integer overflow")
(assert_trap (invoke "i32.trunc_f32_u" (f32.const -Infinity)) "integer overflow")
(assert_trap (invoke "i32.trunc_f32_u" (f32.const NaN)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f32_u" (f32.const nan:0x200000)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f32_u" (f32.const -nan)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f32_u" (f32.const -nan:0x200000)) "invalid conversion to integer")

(assert_return (invoke "i32.trunc_f64_s" (f64.const 0.0)) (i32.const 0))
(assert_return (invoke "i32.trunc_f64_s" (f64.const -0.0)) (i32.const 0))
(assert_return (invoke "i32.trunc_f64_s" (f64.const 4.940656e-324)) (i32.const 0))
(assert_return (invoke "i32.trunc_f64_s" (f64.const -4.940656e-324)) (i32.const 0))
(assert_return (invoke "i32.trunc_f64_s" (f64.const 1.0)) (i32.const 1))
(assert_return (invoke "i32.trunc_f64_s" (f64.const 1.100000e+00)) (i32.const 1))
(assert_return (invoke "i32.trunc_f64_s" (f64.const 1.5)) (i32.const 1))
(assert_return (invoke "i32.trunc_f64_s" (f64.const -1.0)) (i32.const -1))
(assert_return (invoke "i32.trunc_f64_s" (f64.const -1.100000e+00)) (i32.const -1))
(assert_return (invoke "i32.trunc_f64_s" (f64.const -1.5)) (i32.const -1))
(assert_return (invoke "i32.trunc_f64_s" (f64.const -1.9)) (i32.const -1))
(assert_return (invoke "i32.trunc_f64_s" (f64.const -2.0)) (i32.const -2))
(assert_return (invoke "i32.trunc_f64_s" (f64.const 2147483647.0)) (i32.const 2147483647))
(assert_return (invoke "i32.trunc_f64_s" (f64.const -2147483648.0)) (i32.const -2147483648))
(assert_trap (invoke "i32.trunc_f64_s" (f64.const 2147483648.0)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_s" (f64.const -2147483649.0)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_s" (f64.const Infinity)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_s" (f64.const -Infinity)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_s" (f64.const NaN)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f64_s" (f64.const nan:0x4000000000000)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f64_s" (f64.const -nan)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f64_s" (f64.const -nan:0x4000000000000)) "invalid conversion to integer")

(assert_return (invoke "i32.trunc_f64_u" (f64.const 0.0)) (i32.const 0))
(assert_return (invoke "i32.trunc_f64_u" (f64.const -0.0)) (i32.const 0))
(assert_return (invoke "i32.trunc_f64_u" (f64.const 4.940656e-324)) (i32.const 0))
(assert_return (invoke "i32.trunc_f64_u" (f64.const -4.940656e-324)) (i32.const 0))
(assert_return (invoke "i32.trunc_f64_u" (f64.const 1.0)) (i32.const 1))
(assert_return (invoke "i32.trunc_f64_u" (f64.const 1.100000e+00)) (i32.const 1))
(assert_return (invoke "i32.trunc_f64_u" (f64.const 1.5)) (i32.const 1))
(assert_return (invoke "i32.trunc_f64_u" (f64.const 1.9)) (i32.const 1))
(assert_return (invoke "i32.trunc_f64_u" (f64.const 2.0)) (i32.const 2))
(assert_return (invoke "i32.trunc_f64_u" (f64.const 2147483648)) (i32.const -2147483648)) ;; 0x1.00000p+31 -> 8000 0000
(assert_return (invoke "i32.trunc_f64_u" (f64.const 4294967295.0)) (i32.const -1))
(assert_return (invoke "i32.trunc_f64_u" (f64.const -9.000000e-01)) (i32.const 0))
(assert_return (invoke "i32.trunc_f64_u" (f64.const 1e8)) (i32.const 100000000))
(assert_trap (invoke "i32.trunc_f64_u" (f64.const 4294967296.0)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_u" (f64.const -1.0)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_u" (f64.const 1e16)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_u" (f64.const 1e30)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_u" (f64.const 9223372036854775808)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_u" (f64.const Infinity)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_u" (f64.const -Infinity)) "integer overflow")
(assert_trap (invoke "i32.trunc_f64_u" (f64.const NaN)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f64_u" (f64.const nan:0x4000000000000)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f64_u" (f64.const -nan)) "invalid conversion to integer")
;; (assert_trap (invoke "i32.trunc_f64_u" (f64.const -nan:0x4000000000000)) "invalid conversion to integer")

(assert_return (invoke "i64.trunc_f32_s" (f32.const 0.0)) (i64.const 0))
(assert_return (invoke "i64.trunc_f32_s" (f32.const -0.0)) (i64.const 0))
(assert_return (invoke "i64.trunc_f32_s" (f32.const 1.401298e-45)) (i64.const 0))
(assert_return (invoke "i64.trunc_f32_s" (f32.const -1.401298e-45)) (i64.const 0))
(assert_return (invoke "i64.trunc_f32_s" (f32.const 1.0)) (i64.const 1))
(assert_return (invoke "i64.trunc_f32_s" (f32.const 1.100000e+00)) (i64.const 1))
(assert_return (invoke "i64.trunc_f32_s" (f32.const 1.5)) (i64.const 1))
(assert_return (invoke "i64.trunc_f32_s" (f32.const -1.0)) (i64.const -1))
(assert_return (invoke "i64.trunc_f32_s" (f32.const -1.100000e+00)) (i64.const -1))
(assert_return (invoke "i64.trunc_f32_s" (f32.const -1.5)) (i64.const -1))
(assert_return (invoke "i64.trunc_f32_s" (f32.const -1.9)) (i64.const -1))
(assert_return (invoke "i64.trunc_f32_s" (f32.const -2.0)) (i64.const -2))
(assert_return (invoke "i64.trunc_f32_s" (f32.const 4294967296)) (i64.const 4294967296)) ;; 0x1.00000p+32 -> 1 0000 0000
(assert_return (invoke "i64.trunc_f32_s" (f32.const -4294967296)) (i64.const -4294967296)) ;; -0x1.00000p+32 -> ffff ffff 0000 0000
(assert_return (invoke "i64.trunc_f32_s" (f32.const 9223371487098961920.0)) (i64.const 9223371487098961920))
(assert_return (invoke "i64.trunc_f32_s" (f32.const -9223372036854775808.0)) (i64.const -9223372036854775808))
(assert_trap (invoke "i64.trunc_f32_s" (f32.const 9223372036854775808.0)) "integer overflow")
(assert_trap (invoke "i64.trunc_f32_s" (f32.const -9223373136366403584.0)) "integer overflow")
(assert_trap (invoke "i64.trunc_f32_s" (f32.const Infinity)) "integer overflow")
(assert_trap (invoke "i64.trunc_f32_s" (f32.const -Infinity)) "integer overflow")
(assert_trap (invoke "i64.trunc_f32_s" (f32.const NaN)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f32_s" (f32.const nan:0x200000)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f32_s" (f32.const -nan)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f32_s" (f32.const -nan:0x200000)) "invalid conversion to integer")

(assert_return (invoke "i64.trunc_f32_u" (f32.const 0.0)) (i64.const 0))
(assert_return (invoke "i64.trunc_f32_u" (f32.const -0.0)) (i64.const 0))
(assert_return (invoke "i64.trunc_f32_u" (f32.const 1.401298e-45)) (i64.const 0))
(assert_return (invoke "i64.trunc_f32_u" (f32.const -1.401298e-45)) (i64.const 0))
(assert_return (invoke "i64.trunc_f32_u" (f32.const 1.0)) (i64.const 1))
(assert_return (invoke "i64.trunc_f32_u" (f32.const 1.100000e+00)) (i64.const 1))
(assert_return (invoke "i64.trunc_f32_u" (f32.const 1.5)) (i64.const 1))
(assert_return (invoke "i64.trunc_f32_u" (f32.const 4294967296)) (i64.const 4294967296))
(assert_return (invoke "i64.trunc_f32_u" (f32.const 18446742974197923840.0)) (i64.const -1099511627776))
(assert_return (invoke "i64.trunc_f32_u" (f32.const -9.000000e-01)) (i64.const 0))
(assert_return (invoke "i64.trunc_f32_u" (f32.const -9.999999e-01)) (i64.const 0))
(assert_trap (invoke "i64.trunc_f32_u" (f32.const 18446744073709551616.0)) "integer overflow")
(assert_trap (invoke "i64.trunc_f32_u" (f32.const -1.0)) "integer overflow")
(assert_trap (invoke "i64.trunc_f32_u" (f32.const Infinity)) "integer overflow")
(assert_trap (invoke "i64.trunc_f32_u" (f32.const -Infinity)) "integer overflow")
(assert_trap (invoke "i64.trunc_f32_u" (f32.const NaN)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f32_u" (f32.const nan:0x200000)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f32_u" (f32.const -nan)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f32_u" (f32.const -nan:0x200000)) "invalid conversion to integer")

(assert_return (invoke "i64.trunc_f64_s" (f64.const 0.0)) (i64.const 0))
(assert_return (invoke "i64.trunc_f64_s" (f64.const -0.0)) (i64.const 0))
(assert_return (invoke "i64.trunc_f64_s" (f64.const 4.940656e-324)) (i64.const 0))
(assert_return (invoke "i64.trunc_f64_s" (f64.const -4.940656e-324)) (i64.const 0))
(assert_return (invoke "i64.trunc_f64_s" (f64.const 1.0)) (i64.const 1))
(assert_return (invoke "i64.trunc_f64_s" (f64.const 1.100000e+00)) (i64.const 1))
(assert_return (invoke "i64.trunc_f64_s" (f64.const 1.5)) (i64.const 1))
(assert_return (invoke "i64.trunc_f64_s" (f64.const -1.0)) (i64.const -1))
(assert_return (invoke "i64.trunc_f64_s" (f64.const -1.100000e+00)) (i64.const -1))
(assert_return (invoke "i64.trunc_f64_s" (f64.const -1.5)) (i64.const -1))
(assert_return (invoke "i64.trunc_f64_s" (f64.const -1.9)) (i64.const -1))
(assert_return (invoke "i64.trunc_f64_s" (f64.const -2.0)) (i64.const -2))
(assert_return (invoke "i64.trunc_f64_s" (f64.const 4294967296)) (i64.const 4294967296)) ;; 0x1.00000p+32 -> 1 0000 0000
(assert_return (invoke "i64.trunc_f64_s" (f64.const -4294967296)) (i64.const -4294967296)) ;; -0x1.00000p+32 -> ffff ffff 0000 0000
(assert_return (invoke "i64.trunc_f64_s" (f64.const 9223372036854774784.0)) (i64.const 9223372036854774784))
(assert_return (invoke "i64.trunc_f64_s" (f64.const -9223372036854775808.0)) (i64.const -9223372036854775808))
(assert_trap (invoke "i64.trunc_f64_s" (f64.const 9223372036854775808.0)) "integer overflow")
(assert_trap (invoke "i64.trunc_f64_s" (f64.const -9223372036854777856.0)) "integer overflow")
(assert_trap (invoke "i64.trunc_f64_s" (f64.const Infinity)) "integer overflow")
(assert_trap (invoke "i64.trunc_f64_s" (f64.const -Infinity)) "integer overflow")
(assert_trap (invoke "i64.trunc_f64_s" (f64.const NaN)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f64_s" (f64.const nan:0x4000000000000)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f64_s" (f64.const -nan)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f64_s" (f64.const -nan:0x4000000000000)) "invalid conversion to integer")

(assert_return (invoke "i64.trunc_f64_u" (f64.const 0.0)) (i64.const 0))
(assert_return (invoke "i64.trunc_f64_u" (f64.const -0.0)) (i64.const 0))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 4.940656e-324)) (i64.const 0))
(assert_return (invoke "i64.trunc_f64_u" (f64.const -4.940656e-324)) (i64.const 0))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 1.0)) (i64.const 1))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 1.100000e+00)) (i64.const 1))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 1.5)) (i64.const 1))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 4294967295)) (i64.const 0xffffffff))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 4294967296)) (i64.const 0x100000000))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 18446744073709549568.0)) (i64.const -2048))
(assert_return (invoke "i64.trunc_f64_u" (f64.const -9.000000e-01)) (i64.const 0))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 1e8)) (i64.const 100000000))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 1e16)) (i64.const 10000000000000000))
(assert_return (invoke "i64.trunc_f64_u" (f64.const 9223372036854775808)) (i64.const -9223372036854775808))
(assert_trap (invoke "i64.trunc_f64_u" (f64.const 18446744073709551616.0)) "integer overflow")
(assert_trap (invoke "i64.trunc_f64_u" (f64.const -1.0)) "integer overflow")
(assert_trap (invoke "i64.trunc_f64_u" (f64.const Infinity)) "integer overflow")
(assert_trap (invoke "i64.trunc_f64_u" (f64.const -Infinity)) "integer overflow")
(assert_trap (invoke "i64.trunc_f64_u" (f64.const NaN)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f64_u" (f64.const nan:0x4000000000000)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f64_u" (f64.const -nan)) "invalid conversion to integer")
;; (assert_trap (invoke "i64.trunc_f64_u" (f64.const -nan:0x4000000000000)) "invalid conversion to integer")

(assert_return (invoke "f32.convert_i32_s" (i32.const 1)) (f32.const 1.0))
(assert_return (invoke "f32.convert_i32_s" (i32.const -1)) (f32.const -1.0))
(assert_return (invoke "f32.convert_i32_s" (i32.const 0)) (f32.const 0.0))
(assert_return (invoke "f32.convert_i32_s" (i32.const 2147483647)) (f32.const 2147483648))
(assert_return (invoke "f32.convert_i32_s" (i32.const -2147483648)) (f32.const -2147483648))
(assert_return (invoke "f32.convert_i32_s" (i32.const 1234567890)) (f32.const 1.234568e+09))
;; Test rounding directions.
(assert_return (invoke "f32.convert_i32_s" (i32.const 16777217)) (f32.const 16777216.0))
(assert_return (invoke "f32.convert_i32_s" (i32.const -16777217)) (f32.const -16777216.0))
(assert_return (invoke "f32.convert_i32_s" (i32.const 16777219)) (f32.const 16777220.0))
(assert_return (invoke "f32.convert_i32_s" (i32.const -16777219)) (f32.const -16777220.0))

(assert_return (invoke "f32.convert_i64_s" (i64.const 1)) (f32.const 1.0))
(assert_return (invoke "f32.convert_i64_s" (i64.const -1)) (f32.const -1.0))
(assert_return (invoke "f32.convert_i64_s" (i64.const 0)) (f32.const 0.0))
(assert_return (invoke "f32.convert_i64_s" (i64.const 9223372036854775807)) (f32.const 9223372036854775807))
(assert_return (invoke "f32.convert_i64_s" (i64.const -9223372036854775808)) (f32.const -9223372036854775808))
(assert_return (invoke "f32.convert_i64_s" (i64.const 314159265358979)) (f32.const 3.141593e+14)) ;; PI
;; Test rounding directions.
(assert_return (invoke "f32.convert_i64_s" (i64.const 16777217)) (f32.const 16777216.0))
(assert_return (invoke "f32.convert_i64_s" (i64.const -16777217)) (f32.const -16777216.0))
(assert_return (invoke "f32.convert_i64_s" (i64.const 16777219)) (f32.const 16777220.0))
(assert_return (invoke "f32.convert_i64_s" (i64.const -16777219)) (f32.const -16777220.0))

(assert_return (invoke "f64.convert_i32_s" (i32.const 1)) (f64.const 1.0))
(assert_return (invoke "f64.convert_i32_s" (i32.const -1)) (f64.const -1.0))
(assert_return (invoke "f64.convert_i32_s" (i32.const 0)) (f64.const 0.0))
(assert_return (invoke "f64.convert_i32_s" (i32.const 2147483647)) (f64.const 2147483647))
(assert_return (invoke "f64.convert_i32_s" (i32.const -2147483648)) (f64.const -2147483648))
(assert_return (invoke "f64.convert_i32_s" (i32.const 987654321)) (f64.const 987654321))

(assert_return (invoke "f64.convert_i64_s" (i64.const 1)) (f64.const 1.0))
(assert_return (invoke "f64.convert_i64_s" (i64.const -1)) (f64.const -1.0))
(assert_return (invoke "f64.convert_i64_s" (i64.const 0)) (f64.const 0.0))
(assert_return (invoke "f64.convert_i64_s" (i64.const 9223372036854775807)) (f64.const 9223372036854775807))
(assert_return (invoke "f64.convert_i64_s" (i64.const -9223372036854775808)) (f64.const -9223372036854775808))
(assert_return (invoke "f64.convert_i64_s" (i64.const 4669201609102990)) (f64.const 4669201609102990)) ;; Feigenbaum
;; Test rounding directions.
(assert_return (invoke "f64.convert_i64_s" (i64.const 9007199254740993)) (f64.const 9007199254740992))
(assert_return (invoke "f64.convert_i64_s" (i64.const -9007199254740993)) (f64.const -9007199254740992))
(assert_return (invoke "f64.convert_i64_s" (i64.const 9007199254740995)) (f64.const 9007199254740996))
(assert_return (invoke "f64.convert_i64_s" (i64.const -9007199254740995)) (f64.const -9007199254740996))

(assert_return (invoke "f32.convert_i32_u" (i32.const 1)) (f32.const 1.0))
(assert_return (invoke "f32.convert_i32_u" (i32.const 0)) (f32.const 0.0))
(assert_return (invoke "f32.convert_i32_u" (i32.const 2147483647)) (f32.const 2147483648))
(assert_return (invoke "f32.convert_i32_u" (i32.const -2147483648)) (f32.const 2147483648))
(assert_return (invoke "f32.convert_i32_u" (i32.const 0x12345678)) (f32.const 3.054199e+08))
(assert_return (invoke "f32.convert_i32_u" (i32.const 0xffffffff)) (f32.const 4294967296.0))
(assert_return (invoke "f32.convert_i32_u" (i32.const 0x80000080)) (f32.const 2.147484e+09))
(assert_return (invoke "f32.convert_i32_u" (i32.const 0x80000081)) (f32.const 2.147484e+09))
(assert_return (invoke "f32.convert_i32_u" (i32.const 0x80000082)) (f32.const 2.147484e+09))
(assert_return (invoke "f32.convert_i32_u" (i32.const 0xfffffe80)) (f32.const 4.294967e+09))
(assert_return (invoke "f32.convert_i32_u" (i32.const 0xfffffe81)) (f32.const 4.294967e+09))
(assert_return (invoke "f32.convert_i32_u" (i32.const 0xfffffe82)) (f32.const 4.294967e+09))
;; Test rounding directions.
(assert_return (invoke "f32.convert_i32_u" (i32.const 16777217)) (f32.const 16777216.0))
(assert_return (invoke "f32.convert_i32_u" (i32.const 16777219)) (f32.const 16777220.0))

(assert_return (invoke "f32.convert_i64_u" (i64.const 1)) (f32.const 1.0))
(assert_return (invoke "f32.convert_i64_u" (i64.const 0)) (f32.const 0.0))
(assert_return (invoke "f32.convert_i64_u" (i64.const 9223372036854775807)) (f32.const 9223372036854775807))
(assert_return (invoke "f32.convert_i64_u" (i64.const -9223372036854775808)) (f32.const 9223372036854775808))
(assert_return (invoke "f32.convert_i64_u" (i64.const 0xffffffffffffffff)) (f32.const 18446744073709551616.0))
;; Test rounding directions.
(assert_return (invoke "f32.convert_i64_u" (i64.const 16777217)) (f32.const 16777216.0))
(assert_return (invoke "f32.convert_i64_u" (i64.const 16777219)) (f32.const 16777220.0))

(assert_return (invoke "f64.convert_i32_u" (i32.const 1)) (f64.const 1.0))
(assert_return (invoke "f64.convert_i32_u" (i32.const 0)) (f64.const 0.0))
(assert_return (invoke "f64.convert_i32_u" (i32.const 2147483647)) (f64.const 2147483647))
(assert_return (invoke "f64.convert_i32_u" (i32.const -2147483648)) (f64.const 2147483648))
(assert_return (invoke "f64.convert_i32_u" (i32.const 0xffffffff)) (f64.const 4294967295.0))

(assert_return (invoke "f64.convert_i64_u" (i64.const 1)) (f64.const 1.0))
(assert_return (invoke "f64.convert_i64_u" (i64.const 0)) (f64.const 0.0))
(assert_return (invoke "f64.convert_i64_u" (i64.const 9223372036854775807)) (f64.const 9223372036854775807))
(assert_return (invoke "f64.convert_i64_u" (i64.const -9223372036854775808)) (f64.const 9223372036854775808))
(assert_return (invoke "f64.convert_i64_u" (i64.const 0xffffffffffffffff)) (f64.const 18446744073709551616.0))
(assert_return (invoke "f64.convert_i64_u" (i64.const 0x8000000000000400)) (f64.const 9.223372e+18))
(assert_return (invoke "f64.convert_i64_u" (i64.const 0x8000000000000401)) (f64.const 9.223372e+18))
(assert_return (invoke "f64.convert_i64_u" (i64.const 0x8000000000000402)) (f64.const 9.223372e+18))
(assert_return (invoke "f64.convert_i64_u" (i64.const 0xfffffffffffff400)) (f64.const 1.844674e+19))
(assert_return (invoke "f64.convert_i64_u" (i64.const 0xfffffffffffff401)) (f64.const 1.844674e+19))
(assert_return (invoke "f64.convert_i64_u" (i64.const 0xfffffffffffff402)) (f64.const 1.844674e+19))
;; Test rounding directions.
(assert_return (invoke "f64.convert_i64_u" (i64.const 9007199254740993)) (f64.const 9007199254740992))
(assert_return (invoke "f64.convert_i64_u" (i64.const 9007199254740995)) (f64.const 9007199254740996))

(assert_return (invoke "f64.promote_f32" (f32.const 0.0)) (f64.const 0.0))
(assert_return (invoke "f64.promote_f32" (f32.const -0.0)) (f64.const -0.0))
(assert_return (invoke "f64.promote_f32" (f32.const 1.123)) (f64.const 1.123))
(assert_return (invoke "f64.promote_f32" (f32.const Infinity)) (f64.const Infinity))
(assert_return (invoke "f64.promote_f32" (f32.const -Infinity)) (f64.const -Infinity))
;; (assert_return_canonical_nan (invoke "f64.promote_f32" (f32.const nan)))
;; (assert_return_arithmetic_nan (invoke "f64.promote_f32" (f32.const nan:0x200000)))
;; (assert_return_canonical_nan (invoke "f64.promote_f32" (f32.const -nan)))
;; (assert_return_arithmetic_nan (invoke "f64.promote_f32" (f32.const -nan:0x200000)))

(assert_return (invoke "f32.demote_f64" (f64.const 0.0)) (f32.const 0.0))
(assert_return (invoke "f32.demote_f64" (f64.const -0.0)) (f32.const -0.0))
(assert_return (invoke "f32.demote_f64" (f64.const 4.940656e-324)) (f32.const 0.0))
(assert_return (invoke "f32.demote_f64" (f64.const -4.940656e-324)) (f32.const -0.0))
(assert_return (invoke "f32.demote_f64" (f64.const 1.0)) (f32.const 1.0))
(assert_return (invoke "f32.demote_f64" (f64.const -1.0)) (f32.const -1.0))

#clearConfig

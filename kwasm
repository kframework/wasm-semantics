#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

kwasm_dir="${KWASM_DIR:-$(dirname $0)}"
build_dir="$kwasm_dir/.build"
defn_dir="${KWASM_DEFN_DIR:-$build_dir/defn}"
lib_dir="$build_dir/local/lib"
k_release_dir="${K_RELEASE:-$kwasm_dir/deps/k/k-distribution/target/release/k}"

export PATH="$k_release_dir/lib/native/linux:$k_release_dir/lib/native/linux64:$k_release_dir/bin/:$PATH"
export LD_LIBRARY_PATH="$k_release_dir/lib/native/linux64:$lib_dir:${LD_LIBRARY_PATH:-}"

test_logs="$build_dir/logs"
mkdir -p "$test_logs"
test_log="$test_logs/tests.log"

KLAB_OUT="${KLAB_OUT:-$build_dir/klab}"
KLAB_NODE_STACK_SIZE="${KLAB_NODE_STACK_SIZE:-30000}"
export KLAB_OUT

export K_OPTS="${K_OPTS:--Xmx16G}"

# Utilities
# ---------

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

pretty_diff() {
    git --no-pager diff --no-index --ignore-all-space "$@"
}

preprocess() {
    local this_script_dir tmp_dir tmp_input
    this_script_dir="$(dirname $0)"
    tmp_dir="$(mktemp -d)"
    tmp_input="$tmp_dir/$(basename $run_file))"
    touch "$tmp_input"
    python "$this_script_dir/preprocessor.py" "$run_file" > "$tmp_input"
    run_file="$tmp_input"
}

# Runners
# -------

run_krun() {
    preprocess
    export K_OPTS="$K_OPTS -Xss500m"
    krun --directory "$backend_dir" "$run_file" "$@"
}

run_kast() {
    local output_mode

    preprocess
    output_mode="${1:-kast}" ; shift
    kast --directory "$backend_dir" "$run_file" --output "$output_mode" "$@"
}

run_prove() {
    export K_OPTS=-Xmx8G
    haskell_backend_command="$k_release_dir/bin/kore-exec"
    if $repl; then
        haskell_backend_command="$k_release_dir/bin/kore-repl --repl-script $kwasm_dir/kast.kscript"
    fi
    kprove --directory "$backend_dir" "$run_file" "$@" --haskell-backend-command "$haskell_backend_command"
}

# Main
# ----

usage() {
    echo "
    usage: $0 run        [--backend (llvm|haskell)]      <pgm>  <K args>*
           $0 kast       [--backend (llvm|haskell)]      <pgm>  <output format> <K args>*
           $0 prove      [--backend (haskell)] [--repl]  <spec> <K args>* -m <def_module>


           $0 [help|--help|version|--version]

       $0 run   : Run a single WebAssembly program
       $0 kast  : Parse a single WebAssembly program and output it in supported format
       $0 prove : Run a WebAssembly K proof

       $0 help    : Display this help message.
       $0 version : Display the KWasm, K, Kore, and Z3 versions in use.

       Note: <pgm> is a path to a file containing a WebAssembly program.
             <spec> is a K specification to be proved.
             <K args> are any arguments you want to pass to K when executing/proving.
             <output format> is the format for Kast to output the term in.
             <def_module> is the module to take as axioms for verification.

       KLab: Make sure that the 'klab/bin' directory is on your PATH to use this option.
"
}

usage_fatal() {
    usage
    fatal "$@"
}

[[ ! -z ${1:-} ]] || usage_fatal "Must supply a command to run."
if [[ "$1" == '--help' ]] || [[ "$1" == 'help' ]]; then
    usage
    exit 0
fi

if [[ "$1" == 'version' ]] || [[ "$1" == '--version' ]]; then
    notif "KWasm Version"
    git rev-parse --short HEAD
    notif "K Version"
    kompile --version
    notif "Kore Version"
    kore-exec --version
    notif "Z3 Version"
    z3 --version
    exit 0
fi

run_command="$1"; shift

[[ ! -z ${1:-} ]] || usage_fatal "Must supply a file to work on."

backend="llvm"
repl=false
[[ ! "$run_command" == 'prove' ]] || backend='haskell'
args=()
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --backend)    args+=("$arg" "$2") ; backend="$2"      ; shift 2 ;;
        --repl)       args+=("$arg")      ; repl=true         ; shift   ;;
        *)            break                                             ;;
    esac
done

! $repl || [[ "$backend" == "haskell" ]] || fatal "REPL option only available for Haskell backend."

backend_dir="$defn_dir/$backend"

# get the run file
[[ ! -z ${1:-} ]] || usage_fatal "Must supply a file to run on."
run_file="$1" ; shift
if [[ "$run_file" == '-' ]]; then
    tmp_input="$(mktemp)"
    trap "rm -rf $tmp_input" INT TERM EXIT
    cat - > "$tmp_input"
    run_file="$tmp_input"
fi
[[ -f "$run_file" ]] || fatal "File does not exist: $run_file"

case "$run_command-$backend" in
    run-@(llvm|haskell)  ) run_krun  "$@" ;;
    kast-@(llvm|haskell) ) run_kast  "$@" ;;
    prove-@(haskell)     ) run_prove "$@" ;;
    *) usage_fatal "Unknown command on '$backend' backend: $run_command" ;;
esac

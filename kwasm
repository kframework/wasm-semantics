#!/usr/bin/env python3

extdir = '.build'
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))
from kninja.runner import *

proj = KProject(extdir = extdir)
wasm_java    = KDefinition( proj, alias = 'wasm-java',    backend = 'java',    directory = proj.builddir('defn/java'),    kprove_flags = '-m KWASM-LEMMAS')
wasm_ocaml   = KDefinition( proj, alias = 'wasm-ocaml',   backend = 'ocaml',   directory = proj.builddir('defn/ocaml'),   kprove_flags = '-m KWASM-LEMMAS')
wasm_llvm    = KDefinition( proj, alias = 'wasm-llvm',    backend = 'llvm',    directory = proj.builddir('defn/llvm'),    kprove_flags = '-m KWASM-LEMMAS')
wasm_haskell = KDefinition( proj, alias = 'wasm-haskell', backend = 'haskell', directory = proj.builddir('defn/haskell'), kprove_flags = '-m KWASM-LEMMAS')
KRunner(proj).main()

"""
    usage: $0 run   [--definition (wasm-ocaml|wasm-java|wasm-haskell)] <pgm>  <K args>*
           $0 kast  [--definition (wasm-ocaml|wasm-java)]              <pgm>  <K args>*
           $0 prove [--definition (wasm-java|wasm-haskell)]            <spec> <K args>*
           $0 klab-run                                                 <pgm>  <K args>*
           $0 klab-prove                                               <spec> <K args>*

       $0 run   : Run a single WebAssembly program
       $0 kast  : Parse a single WebAssembly program
       $0 prove : Run a WebAssembly K proof
       $0 klab-(run|prove) : Run or prove a spec and launch KLab on the execution graph.

       Note: <pgm> is a path to a file containing a WebAssembly program.
             <spec> is a K specification to be proved.
             <K args> are any arguments you want to pass to K when executing/proving.

       KLab: Make sure that the 'klab/bin' directory is on your PATH to use this option.
"""
